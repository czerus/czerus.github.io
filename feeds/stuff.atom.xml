<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Testing, Linux, Git &amp; stuff - Stuff</title><link href="https://czerus.github.io/" rel="alternate"></link><link href="https://czerus.github.io/feeds/stuff.atom.xml" rel="self"></link><id>https://czerus.github.io/</id><updated>2018-02-16T00:00:00+01:00</updated><entry><title>Lepsza konsola dla Windowsa</title><link href="https://czerus.github.io/lepsza-konsola-dla-windowsa.html" rel="alternate"></link><published>2018-02-16T00:00:00+01:00</published><updated>2018-02-16T00:00:00+01:00</updated><author><name>czerus</name></author><id>tag:czerus.github.io,2018-02-16:/lepsza-konsola-dla-windowsa.html</id><summary type="html">
&lt;p&gt;W pracy od ponad dwóch lat używam Linuxa. I jest różnie. Raz działa lepiej a innym razem nieco gorzej.
To nie wybudzi się z drzemki to straci licjencję na wyświetlanie niektórych liter w GUI...
Nie zmienia to jednak faktu, że konsola (jakakolwiek) + bash to jest to co czyni pracę domorosłego programisty/zawodowego testera przyjemnością.
</summary><content type="html">
&lt;p&gt;W pracy od ponad dwóch lat używam Linuxa. I jest różnie. Raz działa lepiej a innym razem nieco gorzej.
To nie wybudzi się z drzemki to straci licjencję na wyświetlanie niektórych liter w GUI...
Nie zmienia to jednak faktu, że konsola (jakakolwiek) + bash to jest to co czyni pracę domorosłego programisty/zawodowego testera przyjemnością.
 &lt;/p&gt;
&lt;p&gt;&lt;img alt="Linux bez licencji na literki" src="https://czerus.github.io/img/brak_licencji.jpg" style="width: 864px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Niestety Windows jest ciągle oporny na to udogodnienie. Napisanie czegokolwiek w "wierszu poleceń" Windowsa to (dla mnie)
dramat w siedmiu aktach. Wiem, że to zupełnie inne środowisko, brak jest &lt;code&gt;bash&lt;/code&gt;a, &lt;code&gt;ksh&lt;/code&gt; czy choćby &lt;code&gt;sh&lt;/code&gt;.
Są za to pliki wsadowe (oczywiście jest też PowerShell)...&lt;/p&gt;
&lt;p&gt;Na szczęście(?) istnieje cała masa równie sfrustrowanych użytkowników Windowsa, którzy próbują tę dziurę załatać.
Do tej pory używałem całkiem przyzwoitego ConEmu oraz Console2, ale to co oferuje &lt;a href="http://cmder.net/"&gt;cmder&lt;/a&gt;
bije wszystkie inne programy na głowę.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cmder" src="https://czerus.github.io/img/cmder.png" style="width: 978px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Jak pisze autor:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cmder is a software package created out of pure frustration over the absence of nice console emulators on Windows.
It is based on amazing software, and spiced up with the Monokai color scheme and a custom prompt layout, looking sexy from the start.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instalacja samego narzędzia sprowadza się do wypakowania pliku zip:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Installation&lt;/p&gt;
&lt;p&gt;Unzip (can take a while)&lt;/p&gt;
&lt;p&gt;(optional) Place your own executable files into the bin folder to be injected into your PATH.&lt;/p&gt;
&lt;p&gt;Run Cmder (Cmder.exe)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sama aplikacja jest dosyć ładna i oferuje kilka killer features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl + `&lt;/code&gt; - jako skrót do przywołania okna&lt;/li&gt;
&lt;li&gt;komendy linuxowe: &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;wc&lt;/code&gt;, pipe, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;history&lt;/code&gt; i kilka innych&lt;/li&gt;
&lt;li&gt;możliwość definiowania własnych aliasów (w pliku &lt;code&gt;config/aliases&lt;/code&gt; albo poprzez polecenie &lt;code&gt;alias&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;obsługa git&lt;/li&gt;
&lt;li&gt;przezroczysty temat&lt;/li&gt;
&lt;li&gt;obsługa uzupełniania koemnd tabami (to, że wymieniam to jako zalętę cmdera świadczy tylko o tym jak bardzo kijowym narzędziem jest cmd.exe)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tak na prawdę cmder wykorzsytuje ConEmu, Clink i jeszcze kilka innych narzędzi tworząc przy tym udane środowisko do pracy w konsoli.&lt;/p&gt;
&lt;p&gt;Niestety aktualnie konsola potrafi działać bardzo wolno np. potrafi się na chwilę przywiesić przy operacjach w katalogach
zawierająych repozytoria git. Problen można obejść wybierając jako domyślną sesję Bash -&amp;gt; Git Bash.&lt;/p&gt;
&lt;p&gt;Ale hej, i tak jest mega bo można skonfigurować cmdera jako terminal w PyCharmie!!!
Wystarczy ustawić polecenie odpalające &lt;code&gt;cmder&lt;/code&gt; w standardowym termialu PyCharma:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyCharm z cmd.exe" src="https://czerus.github.io/img/pycharm_cmd.png" style="width: 951px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"cmd.exe" /k ""%CMDER_ROOT%\vendor\init.bat""
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Pycharm z Cmder" src="https://czerus.github.io/img/pycharm_cmder.png" style="width: 951px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;gdzie &lt;code&gt;CMDER_ROOT&lt;/code&gt; jest zmienną środowiskową wskazującą na katalog instalacji cmdera. &lt;/p&gt;
&lt;p&gt;PS ustawienie ścieżki do cmdera &lt;code&gt;cmder\Cmder.exe&lt;/code&gt; bezpośrednio w IDE sprawi, że konsola otworzy się w zupełnie nowym oknie (poza PyCharmem). &lt;/p&gt;
&lt;p&gt;&lt;img alt="Cmder" src="https://czerus.github.io/img/pycharm_terminal_conf.png" style="width: 765px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Code on!&lt;/p&gt;</content><category term="windows"></category><category term="terminal"></category><category term="konsola"></category><category term="cmder"></category></entry><entry><title>Jekyll vs Pelican</title><link href="https://czerus.github.io/jekyll-vs-pelican.html" rel="alternate"></link><published>2017-09-14T22:20:00+02:00</published><updated>2017-09-14T22:20:00+02:00</updated><author><name>czerus</name></author><id>tag:czerus.github.io,2017-09-14:/jekyll-vs-pelican.html</id><summary type="html">
&lt;p&gt;Od kilku lat coraz większą popularność zdobywają generatory statycznych stron wwww takie jak Jekyll. Dlaczego ludzie 
wybierają technologię rodem z poprzedniego wieku w dobie WordPressa? I czym właściwie jest wspomniany Jekyll i czym różni
się od Pelicana?
</summary><content type="html">
&lt;p&gt;Od kilku lat coraz większą popularność zdobywają generatory statycznych stron wwww takie jak Jekyll. Dlaczego ludzie 
wybierają technologię rodem z poprzedniego wieku w dobie WordPressa? I czym właściwie jest wspomniany Jekyll i czym różni
się od Pelicana?
 &lt;/p&gt;
&lt;h2&gt;Generator statycznych stron www&lt;/h2&gt;
&lt;p&gt;[Generator statycznych stron www przetwarza dokumenty markdown lub restructured text na strony html. Korzysta przy tym
z szablonów oraz wtyczek oferowanych przez dane środowisko. Cały content trzymany jest w plikach md lub rst, a nie w bazie
danych. Generator przetwarza zatem statyczne dokumenty na strony html według predefiniowanych szablonów uwzględnaiając
funkcjonalności dodawane przez wtyczki. Wystarczy teraz wgrać zestaw wygenerowanych dokumentów na serwer mający jedynie
Apache lub ngix. Tak wygenerowany strona/blog powinien być w założeniu bardzo szybki i bezpieczny. 
W dodatku &lt;a href="https://pages.github.com/"&gt;GitHub&lt;/a&gt; oferuje możliwość hostowania takich stron. Wystarczy założyć konto, 
włączyć osobistą stronę i wrzucić wygenerowane pliki. Będą one dostępne pod adresem: http://nazwa_zuytkownika.github.io. &lt;/p&gt;
&lt;h2&gt;Jekyll&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; jest pierwszym programem tego typu. Został stworzony przez jednego z założycieli GitHuba 
a napisany w Ruby. 
Do uruchomienia wymaga całego środowiska Ruby. Pluginy oraz szablony instalowane są za pomocą gemów. Z uwagi na swój
wiek Jekyll posiada całkiem sporą ilość rozszerzeń oraz tematów graficznych. Pierwsza wersja tego bloga została wygenerowana
właśnie z użyciem lepszej wersji Pana Hyde'a. Niestety nie wspominam tego dobrze. Środowisko Ruby zainstalowało się na 
Fedorze bez problemu, ale potem gemy itp. itd.... Trochę to trwało. Ogarnąłem szablony na tyle, aby je modyfikować, ale
dalej uważałem, że czegoś tu brakuje. I wtedy...&lt;/p&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;...trafiłem na artykuł w &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;Fedora Magazine&lt;/a&gt;. Okazało
się, że Pelican to pajtonowy Jekyll. Instaluje się go za pomocą zwykłego &lt;code&gt;pip install pelican&lt;/code&gt;. Plik ustawień to zwykły
plik pythona ze zmiennymi (listy, słowniki, stringi). Instalowanie rozszerzeń i tematów jest dużo prostsze. Na serio!
Jak ogarnięcie się w Jekyllu zajęło mi tydzień (głównie wieczory) tak ogarnięcie Pelicana to jeden wieczór.
Po więcej szczegółów zapraszam na &lt;a href="http://docs.getpelican.com/en/latest/"&gt;RtD&lt;/a&gt; Pelicana. 
Jednym słowem bardzo polecam szczególnie tym, którzy Pythona lubią i szanują :).&lt;/p&gt;
&lt;p&gt;Code on!&lt;/p&gt;</content><category term="jekyll"></category><category term="pelican"></category><category term="python"></category></entry></feed>